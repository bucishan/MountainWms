@{
    Layout = "_LayoutMain";
}
@section styles{
    @RenderSection("styles", false)
}
<view>
    @await Component.InvokeAsync("Nav")
    <section class="content">
        <div class="row">
            <div class="col-xs-12">
                <div class="box">
                    @*<div class="box-header with-border">
                        <h3 class="box-title">搜索条件</h3>
                        <div class="box-tools pull-right">
                            <button type="button" id="test" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip">
                                <i class="fa fa-minus"></i>
                            </button>
                        </div>
                    </div>*@
                    <div class="box-body">
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                            <input type="text" v-model="datemin" ref="datemin" id="datemin" class="form-control" style="width:120px;">
                            <input type="text" v-model="datemax" ref="datemax" id="datemax" class="form-control" style="width:120px;margin-left:-1px;">
                            @{
                                @*@Context.Request.Path*@
                                switch (@Context.Request.Path)
                                {
                                    case "/Dict":
                                        @await Component.InvokeAsync("DictType", new { model = "DictType", style = "width:120px;margin-left:10px;", title = "全部类别" })
                                        break;
                                    case "/StockIn":
                                        @await Component.InvokeAsync("DictTypeSelect", M.Utils.Pub.PubDictType.stockin.ToString())
                                        @await Component.InvokeAsync("StockStatus", "StockInStatus")
                                        break;
                                    case "/StockOut":
                                        @await Component.InvokeAsync("DictTypeSelect", M.Utils.Pub.PubDictType.stockout.ToString())
                                        @await Component.InvokeAsync("StockStatus", "StockOutStatus")
                                        break;
                                    case "/Inventory":
                                        @await Component.InvokeAsync("StorageRack", new { model = "StorageRackId", style = "width:120px;margin-left:10px;", title = "全部货架" })
                                        <select id="MaterialId" style="width:120px;" v-model="MaterialId" class="selectpicker" data-live-search="true"></select>
                                        break;
                                    case "/InventoryMove":
                                        @await Component.InvokeAsync("StockStatus", "Status")
                                        break;
                                }
                            }
                            <button name="search" v-on:click="searchL" type="submit" class="btn btn-success" style="margin-left:10px;"><i class="fa fa-search"></i> 搜索</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12">
                <div class="box">
                    <div class="box-body">
                        <div id="toolbar" class="btn-group">
                            @*<button id="btn_add" v-if="auth.indexOf('add')>=0" v-on:click="showL" type="button" class="btn btn-default">
                                    <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>新增
                                </button>
                                <button id="btn_edit" v-if="auth.indexOf('edit')>=0" v-on:click="editL" type="button" class="btn btn-default">
                                    <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>修改
                                </button>
                                <button id="btn_delete" v-if="auth.indexOf('delete')>=0" v-on:click="deleteL" type="button" class="btn btn-default">
                                    <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>删除
                                </button>
                                <button id="btn_query" v-if="auth.indexOf('query')>=0" v-on:click="queryL" type="button" class="btn btn-default">
                                    <span class="glyphicon glyphicon-th-large" aria-hidden="true"></span>权限
                                </button>
                                <button id="btn_enable" v-if="auth.indexOf('enable')>=0" v-on:click="enableL" type="button" class="btn btn-default">
                                    <span class="glyphicon glyphicon-off" aria-hidden="true"></span>启用
                                </button>*@
                            @await Component.InvokeAsync("MenuAuth")
                        </div>
                        <table id="bootstraptable" class="table table-bordered table-hover text-nowrap"></table>
                        @*@RenderBody()*@
                    </div>
                </div>
            </div>
        </div>
    </section>
</view>
@section scripts{
    @*<script type="text/javascript">
            app.methods =
            var vue = new Vue({
                el: "#app",
                data: {
                    authlist:[]
                },
                mounted: function () {
                    var _self = this;
                    _self.$nextTick(function () {
                        _self.queryAuth();
                    });
                },
                methods: {
                    queryAuth: function () {
                        var _self = this;
                        axios.get('/Auth/GetAuth')
                            .then(function (response) {
                                _self.authlist = response.data;
                            })
                            .catch(function (error) {
                                layer.msg(error.message, { icon: 5 });
                            });
                    },
                }
            })
        </script>*@

    @RenderSection("scripts", false)
}